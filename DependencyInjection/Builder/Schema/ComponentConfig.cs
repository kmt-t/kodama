//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// このソース コードは xsd によって自動生成されました。Version=1.1.4322.2032 です。
// 
namespace Kodama.DependencyInjection.Builder.Schema {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class componentConfig {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("include", typeof(componentConfigInclude), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("remotingConfig", typeof(componentConfigRemotingConfig), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("assembly", typeof(componentConfigAssembly), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("component", typeof(componentConfigComponent), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("autoDiscovery", typeof(componentConfigAutoDiscovery), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("aspect", typeof(aspectType), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object[] Items;
    }
    
    /// <remarks/>
    public class componentConfigInclude {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string path;
    }
    
    /// <remarks/>
    public class initializerArgument {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("expression", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Item;
    }
    
    /// <remarks/>
    public class componentConfigComponentInitialize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("argument", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public initializerArgument[] argument;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
    }
    
    /// <remarks/>
    public class componentConfigComponentMethod {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("argument", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public injectorArgument[] argument;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
    }
    
    /// <remarks/>
    public class injectorArgument {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("injectionName", typeof(injectorArgumentInjectionName), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("expression", typeof(string), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("injectionType", typeof(injectorArgumentInjectionType), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object Item;
    }
    
    /// <remarks/>
    public class injectorArgumentInjectionName {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
    }
    
    /// <remarks/>
    public class injectorArgumentInjectionType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string @class;
    }
    
    /// <remarks/>
    public class componentAspectType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string interceptor;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(filterType.name)]
        public filterType methodFilterType = filterType.name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string methodFilter;
    }
    
    /// <remarks/>
    public enum filterType {
        
        /// <remarks/>
        attribute,
        
        /// <remarks/>
        name,
    }
    
    /// <remarks/>
    public class componentConfigComponent {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("aspect", typeof(componentAspectType), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("constructor", typeof(injectorArgument[]), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("initialize", typeof(componentConfigComponentInitialize), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("method", typeof(componentConfigComponentMethod), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object[] Items;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string @class;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string primary;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(instanceType.prototype)]
        public instanceType instance = instanceType.prototype;
    }
    
    /// <remarks/>
    public enum instanceType {
        
        /// <remarks/>
        singleton,
        
        /// <remarks/>
        prototype,
        
        /// <remarks/>
        outer,
    }
    
    /// <remarks/>
    public class aspectType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string interceptor;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(filterType.name)]
        public filterType classFilterType = filterType.name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string classFilter;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(filterType.name)]
        public filterType methodFilterType = filterType.name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string methodFilter;
    }
    
    /// <remarks/>
    public class componentConfigAutoDiscoverySearchPath {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string path;
    }
    
    /// <remarks/>
    public class componentConfigAutoDiscovery {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("searchPath", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public componentConfigAutoDiscoverySearchPath[] Items;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string category;
    }
    
    /// <remarks/>
    public class componentConfigRemotingConfig {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string path;
    }
    
    /// <remarks/>
    public class componentConfigAssembly {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
    }
}
